#ifndef __ASSEMBLY_BLOCK_H
#define __ASSEMBLY_BLOCK_H
#include "operand.h"
#include "assembler_item.h"
#include "instruction.h"
#include "segment_declaration.h"
#include "extern_symbol.h"
#include "global_symbol.h"

class AssemblyBlock {
public:
  void aaa();
  void aad();
  void aam();
  void aas();
  void adc( Operand&, Operand& );
  void add( Operand&, Operand& );
  void _and( Operand&, Operand& );
  void arpl( Operand&, Operand& );
  void bound( Operand&, Operand& );
  void bsf( Operand&, Operand& );
  void bsr( Operand&, Operand& );
  void bswap( Operand& );
  void bt( Operand&, Operand& );
  void btc( Operand&, Operand& );
  void btr( Operand&, Operand& );
  void bts( Operand&, Operand& );
  void call( Operand& );
  void call_far( Operand& );
  void cbw();
  void cwd();
  void cdw();
  void cwde();
  void clc();
  void cld();
  void cli();
  void clts();
  void cmc();
  void cmp( Operand&, Operand& );
  void cmpsb();
  void cmpsw();
  void cmpsd();
  void daa();
  void das();
  void dec( Operand& );
  void div( Operand& );
  void enter( Operand&, Operand& );
  void hlt();
  void idiv( Operand& );
  void imul( Operand& );
  void imul( Operand&, Operand& );
  void imul( Operand&, Operand&, Operand& );
  void in( Operand&, Operand& );
  void inc( Operand& );
  void insb();
  void insw();
  void insd();
  void _int( Operand& );
  void int3();
  void into();
  void invtlb( Operand& );
  void iret();
  void iretw();
  void iretd();
  void ja( Operand& );
  void jae( Operand& );
  void jb( Operand& );
  void jbe( Operand& );
  void jc( Operand& );
  void je( Operand& );
  void jg( Operand& );
  void jge( Operand& );
  void jl( Operand& );
  void jle( Operand& );
  void jna( Operand& );
  void jnae( Operand& );
  void jnb( Operand& );
  void jnbe( Operand& );
  void jnc( Operand& );
  void jne( Operand& );
  void jng( Operand& );
  void jnge( Operand& );
  void jnl( Operand& );
  void jnle( Operand& );
  void jno( Operand& );
  void jnp( Operand& );
  void jns( Operand& );
  void jnz( Operand& );
  void jo( Operand& );
  void jp( Operand& );
  void jpe( Operand& );
  void jpo( Operand& );
  void js( Operand& );
  void jz( Operand& );
  void jmp( Operand& );
  void jmp_far( Operand& );
  void lahf();
  void lar( Operand&, Operand& );
  void lds( Operand&, Operand& );
  void les( Operand&, Operand& );
  void lfs( Operand&, Operand& );
  void lgs( Operand&, Operand& );
  void lss( Operand&, Operand& );
  void lea( Operand&, Operand& );
  void leave();
  void lgdt( Operand& );
  void lidt( Operand& );
  void lldt( Operand& );
  void lock();
  void lodsb();
  void lodsw();
  void lodsd();
  void loop( Operand& );
  void loope( Operand& );
  void loopne( Operand& );
  void lsl( Operand&, Operand& );
  void ltr( Operand& );
  void mov( Operand&, Operand& );
  void movsb();
  void movsw();
  void movsd();
  void movsx( Operand&, Operand& );
  void movzx( Operand&, Operand& );
  void mul( Operand& );
  void neg( Operand& );
  void nop();
  void _or( Operand&, Operand& );
  void out( Operand&, Operand& );
  void outsb();
  void outsw();
  void outsd();
  void pop( Operand& );
  void popa();
  void popad();
  void popf();
  void popfd();
  void push( Operand& );
  void pusha();
  void pushad();
  void pushf();
  void pushfd();
  void rcl( Operand& );
  void rcl( Operand&, Operand& );
  void rcr( Operand& );
  void rcr( Operand&, Operand& );
  void rep();
  void repe();
  void repne();
  void ret();
  void ret( Operand& );
  void retf();
  void retf( Operand& );
  void rol( Operand& );
  void rol( Operand&, Operand& );
  void ror( Operand& );
  void ror( Operand&, Operand& );
  void sahf();
  void sal( Operand& );
  void sal( Operand&, Operand& );
  void sar( Operand& );
  void sar( Operand&, Operand& );
  void sbb( Operand&, Operand& );
  void scasb();
  void scasw();
  void scasd();
  void seta( Operand& );
  void setae( Operand& );
  void setb( Operand& );
  void setbe( Operand& );
  void setc( Operand& );
  void sete( Operand& );
  void setg( Operand& );
  void setge( Operand& );
  void setl( Operand& );
  void setle( Operand& );
  void setna( Operand& );
  void setnae( Operand& );
  void setnb( Operand& );
  void setnbe( Operand& );
  void setne( Operand& );
  void setng( Operand& );
  void setnge( Operand& );
  void setnl( Operand& );
  void setnle( Operand& );
  void setno( Operand& );
  void setnp( Operand& );
  void setns( Operand& );
  void setnz( Operand& );
  void seto( Operand& );
  void setp( Operand& );
  void setpe( Operand& );
  void setpo( Operand& );
  void sets( Operand& );
  void setz( Operand& );
  void sgdt( Operand& );
  void shdl( Operand&, Operand&, Operand& );
  void shdr( Operand&, Operand&, Operand& );
  void sidt( Operand& );
  void sldt( Operand& );
  void shl( Operand& );
  void shl( Operand&, Operand& );
  void shr( Operand& );
  void shr( Operand&, Operand& );
  void stc();
  void std();
  void sti();
  void stosb();
  void stosw();
  void stosd();
  void str( Operand& );
  void sub( Operand&, Operand& );
  void test( Operand&, Operand& );
  void verr( Operand& );
  void verw( Operand& );
  void wait();
  void xchg( Operand&, Operand& );
  void xlat();
  void _xor( Operand&, Operand& );
  AssemblyBlock();
  void AppendBlock( AssemblyBlock* );
  void AppendItem( AssemblerItem* );
  void PrependItem( AssemblerItem* );
  void AppendInstruction( Instruction* );
  AssemblerItemIterator Instructions() { return AssemblerItemIterator( first ); }
  void LabelFirstInstruction( std::string );
  void LabelLastInstruction( std::string );
  void CommentLastInstruction( std::string );
  void AddHangingLabel( std::string );
  void SetSegment( std::string );
 private:
  AssemblerItem *first;
  AssemblerItem *last;
};
#endif

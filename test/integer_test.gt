main: λ()
  ; Equality
  assert(0 ≡ 0)
  assert_false(0 ≡ 1)
  assert(1 ≡ 1)

  ; Inequality
  assert(0 ≢ 1)
  assert_false(0 ≢ 0)
  assert(1 ≢ 2)

  ; Addition
  assert_equal(2, 1 + 1)
  assert_equal(0, 0 + 0)
  assert_equal(512, 256 + 256)

  ; Subtraction
  assert_equal(1, 2 - 1)
  assert_equal(0, 0 - 0)
  assert_equal(1024, 2048 - 1024)

  ; Multiplication
  assert_equal(0, 1 * 0)
  assert_equal(0, 0 * 1)
  assert_equal(1, 1 * 1)
  assert_equal(2, 2 * 1)
  assert_equal(400, 20 * 20)

  ; Division
  ; NB: Not testing for divide by zero yet
  assert_equal(1, 1 / 1)
  assert_equal(2, 2 / 1)
  assert_equal(4, 16 / 4)

assert: λ(condition)
  if condition
    print(".")
  else
    print("F")

assert_false: λ(condition)
  if condition
    print("F")
  else
    print(".")

assert_equal: λ(item1, item2)
  if item1 ≡ item2
    print(".")
  else
    print("F")

print: λ(str)
  asm
    push 1              ; length of string
    push str.payload    ; string
    push 1              ; file descriptor (STDOUT)
    mov  eax, 4         ; System call number
    sub  esp, 4         ; 4 bytes for OSX
    int  128            ; System Call
    add  esp, 16
  return 0


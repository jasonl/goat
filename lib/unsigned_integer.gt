; UnsignedInteger
;
; This is a built-in class to represent a 32-bit unsigned integer, with
; valid values from 0 to 4,294,967,296.
;
class UnsignedInteger
  ; Integer addition
  ; Adds the addend to the value of this instance, and returns the sum.
  +: λ( addend )
    ; Function prolog automatically generated
    ; push ebp
    ; mov ebp, esp
    asm
      mov ecx, addend.type      ; Load type hash of first argument into ECX
      cmp ecx, #UnsignedInteger     ; test that divisor is an Integer
      jne UnsignedInteger_u2b_incorrect_type
      add eax, addend.payload
      mov edx, &UnsignedInteger
      mov ecx, #UnsignedInteger
      add esp, 12
      pop ebp
      ret
      UnsignedInteger_u2b_incorrect_type:

  ; UnsignedInteger subtraction
  ; Subtracts the subtrahend from the value of this instance, and returns
  ; the difference.
  -: λ( subtrahend )
    asm
      mov ecx, subtrahend.type ; Load type hash of first argument into ECX
      cmp ecx, #UnsignedInteger        ; test that divisor is an UnsignedInteger
      jne UnsignedInteger_u2d_incorrect_type
      sub eax, subtrahend.payload
      mov edx, &UnsignedInteger
      mov ecx, #UnsignedInteger
      add esp, 12
      pop ebp
      ret
      UnsignedInteger_u2d_incorrect_type:

  ; UnsignedInteger multiplication
  ; Multiplies the two signed integers and returns the result. Any overflow
  ; is discarded
  *: λ( factor )
    asm
      mov ecx, factor.type   ; Load type hash of first argument into ECX
      cmp ecx, #UnsignedInteger      ; test that divisor is an UnsignedInteger
      jne UnsignedInteger_u2a_incorrect_type
      mul dword factor.payload    ; This instance's value is already in eax
      mov edx, &UnsignedInteger      ; dispatch function
      mov ecx, #UnsignedInteger      ; UnsignedInteger type hash
      add esp, 12
      pop ebp
      ret                    ; and return
      UnsignedInteger_u2a_incorrect_type:

  ; Modulo operation. a % b returns the remainder when a is divided by
  ; b using integer division.
  ;
  ; my - the divident (which determines the sign of the result)
  ; divisor - the divisor, must be an UnsignedInteger
  %: λ( divisor )
    asm
      mov ecx, divisor.type  ; Load type hash of first argument into ECX
      cmp ecx, #UnsignedInteger      ; test that divisor is an UnsignedInteger
      jne UnsignedInteger_u25_incorrect_type
      div dword divisor.payload
      mov eax, edx           ; remainder in edx, we want to return it in eax
      mov edx, &UnsignedInteger      ; dispatch function
      mov ecx, #UnsignedInteger      ; UnsignedInteger type hash
      add esp, 12
      pop ebp
      ret                    ; and return
      UnsignedInteger_u25_incorrect_type:
      ; Do something?

  ; Bitwise and
  &: λ(operand)
    asm
      mov ecx, operand.type
      cmp ecx, #UnsignedInteger
      jne UnsignedInteger_u26_incorrect_type
      and eax, operand.payload
      mov edx, &UnsignedInteger      ; dispatch function
      mov ecx, #UnsignedInteger
      add esp, 12
      pop ebp
      ret
      UnsignedInteger_u26_incorrect_type:

  ; Bitwise or
  |: λ(operand)
    asm
      mov ecx, operand.type
      cmp ecx, #UnsignedInteger
      jne UnsignedInteger_u7c_incorrect_type
      or eax, operand.payload
      mov edx, &UnsignedInteger      ; dispatch function
      mov ecx, #UnsignedInteger
      add esp, 12
      pop ebp
      ret
      UnsignedInteger_u7c_incorrect_type:

  ; greater than. Returns a boolean object
  >: λ( term )
    asm
      mov ecx, term.type     ; Load type has of the first argument into ecx
      cmp ecx, #UnsignedInteger      ; Test that the term is an UnsignedInteger
      jne UnsignedInteger_u3e_incorrect_type
      cmp eax, term.payload  ; Test the two number
      ja UnsignedInteger_u3e_true
      mov eax, 0             ; False boolean value
      mov edx, &Boolean      ; Boolean object dispatch function
      mov ecx, #Boolean      ; Boolean object type hash
      add esp, 12
      pop ebp
      ret                    ; and return
      UnsignedInteger_u3e_true:
      mov eax, 1
      mov edx, &Boolean      ; Boolean object dispatch function
      mov ecx, #Boolean      ; Boolean object type hash
      add esp, 12
      pop ebp
      ret                    ; and return
      UnsignedInteger_u3e_incorrect_type:

  ; Less than. Returns a boolean object
  <: λ( term )
    asm
      mov ecx, term.type     ; Load type has of the first argument into ecx
      cmp ecx, #UnsignedInteger      ; Test that the term is an UnsignedInteger
      jne UnsignedInteger_u3c_incorrect_type
      cmp eax, term.payload  ; Test the two number
      jb UnsignedInteger_u3c_true                ; Jump if less than
      mov eax, 0             ; False boolean value
      mov edx, &Boolean      ; Boolean object dispatch function
      mov ecx, #Boolean      ; Boolean object type hash
      add esp, 12
      pop ebp
      ret                    ; and return
      UnsignedInteger_u3c_true:
      mov eax, 1
      mov edx, &Boolean      ; Boolean object dispatch function
      mov ecx, #Boolean      ; Boolean object type hash
      add esp, 12
      pop ebp
      ret                    ; and return
      UnsignedInteger_u3c_incorrect_type:

  ; Greater than or Equal to. Returns a boolean object
  ≥: λ( term )
    asm
      mov ecx, term.type     ; Load type has of the first argument into ecx
      cmp ecx, #UnsignedInteger      ; Test that the term is an UnsignedInteger
      jne UnsignedInteger_u2265_incorrect_type
      cmp eax, term.payload  ; Test the two numbers
      jae UnsignedInteger_u2265_true
      mov eax, 0             ; False boolean value
      mov edx, &Boolean      ; Boolean object dispatch function
      mov ecx, #Boolean      ; Boolean object type hash
      add esp, 12
      pop ebp
      ret                    ; and return
      UnsignedInteger_u2265_true:
      mov eax, 1
      mov edx, &Boolean      ; Boolean object dispatch function
      mov ecx, #Boolean      ; Boolean object type hash
      add esp, 12
      pop ebp
      ret                    ; and return
      UnsignedInteger_u2265_incorrect_type:

  ; Less than or equal to. Returns a boolean object
  ≤: λ( term )
    asm
      mov ecx, term.type     ; Load type has of the first argument into ecx
      cmp ecx, #UnsignedInteger      ; Test that the term is an UnsignedInteger
      jne UnsignedInteger_u2264_incorrect_type
      cmp eax, term.payload  ; Test the two number
      jbe UnsignedInteger_u2264_true
      mov eax, 0             ; False boolean value
      mov edx, &Boolean      ; Boolean object dispatch function
      mov ecx, #Boolean      ; Boolean object type hash
      add esp, 12
      pop ebp
      ret                    ; and return
      UnsignedInteger_u2264_true:
      mov eax, 1
      mov edx, &Boolean      ; Boolean object dispatch function
      mov ecx, #Boolean      ; Boolean object type hash
      add esp, 12
      pop ebp
      ret                    ; and return
      UnsignedInteger_u2264_incorrect_type:

  ≡: λ(term)
    asm
      mov ecx, term.type     ; Load type hash of the first argumment into ecx
      cmp ecx, #UnsignedInteger
      jne UnsignedInteger_u2261_not_equal ; If it's not an UnsignedInteger, then it cannot be equal
      cmp eax, term.payload  ; Do the comparison
      jne UnsignedInteger_u2261_not_equal
      mov eax, 1             ; return Boolean(true)
      mov edx, &Boolean
      mov ecx, #Boolean
      add esp, 12
      pop ebp
      ret
      UnsignedInteger_u2261_not_equal:
      mov eax, 0             ; return Boolean(false)
      mov edx, &Boolean
      mov ecx, #Boolean
      add esp, 12
      pop ebp
      ret

  ≢: λ(term)
    asm
      mov ecx, term.type     ; Load type hash of the first argumment into ecx
      cmp ecx, #UnsignedInteger
      jne UnsignedInteger_u2262_not_equal          ; If it's not an UnsignedInteger, then it cannot be equal
      cmp eax, term.payload  ; Do the comparison
      jne UnsignedInteger_u2262_not_equal
      mov eax, 0             ; return Boolean(false)
      mov edx, &Boolean
      mov ecx, #Boolean
      add esp, 12
      pop ebp
      ret
      UnsignedInteger_u2262_not_equal:
      mov eax, 1             ; return Boolean(true)
      mov edx, &Boolean
      mov ecx, #Boolean
      add esp, 12
      pop ebp
      ret

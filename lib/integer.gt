; Integer
;
; This is a built-in class to represent a 32-bit signed integer, with
; valid values from -2,147,483,648 to +2,147,483,647
;
; Calling Convention
;
; Bottom of Stack             0000000000
; Right-most arg type hash    0xAAAAAAAA   [DWORD]
; Right-most arg dispatch fn  0x01314122   [DWORD]
; Right-most arg payload      0x00001234   [DWORD]
; ...                         ...
; Left-most arg type hash     0A3f9873C0   [DWORD] +16
; Left-most arg dispatch fn   0x13142433   [DWORD] +12
; Left-most arg payload       0x00000001   [DWORD] +8
; Old EIP (return address)    0x12345677   [DWORD] +4
; Old EBP                     0x123456789  [DWORD] <- EBP,ESP points here
;                                                     At function entry
; my-instance payload         EAX
; my-instance message hash    ECX
;
; Function return
; return object type hash     ECX
; return object dispatch fn   EDX
; return object payload       EAX
;
class Integer
  ; Integer addition
  ; Adds the addend to the value of this instance, and returns the sum.
  +: λ( addend )
    ; Function prolog automatically generated
    ; push ebp
    ; mov ebp, esp
    asm
      mov ecx, addend.type      ; Load type hash of first argument into ECX
      cmp ecx, #Integer     ; test that divisor is an Integer
      jne Integer_u2b_incorrect_type
      add eax, addend.payload
      mov edx, &Integer
      mov ecx, #Integer
      add esp, 12
      pop ebp
      ret
      Integer_u2b_incorrect_type:

  ; Integer subtraction
  ; Subtracts the subtrahend from the value of this instance, and returns
  ; the difference.
  -: λ( subtrahend )
    asm
      mov ecx, subtrahend.type ; Load type hash of first argument into ECX
      cmp ecx, #Integer        ; test that divisor is an Integer
      jne Integer_u2d_incorrect_type
      sub eax, subtrahend.payload
      mov edx, &Integer
      mov ecx, #Integer
      add esp, 12
      pop ebp
      ret
      Integer_u2d_incorrect_type:

  ; Integer multiplication
  ; Multiplies the two signed integers and returns the result. Any overflow
  ; is discarded
  *: λ( factor )
    asm
      mov ecx, factor.type   ; Load type hash of first argument into ECX
      cmp ecx, #Integer      ; test that divisor is an Integer
      jne Integer_u2a_incorrect_type
      imul factor.payload    ; This instance's value is already in eax
      mov edx, &Integer      ; dispatch function
      mov ecx, #Integer      ; Integer type hash
      add esp, 12
      pop ebp
      ret                    ; and return
      Integer_u2a_incorrect_type:

  ; Modulo operation. a % b returns the remainder when a is divided by
  ; b using integer division.
  ;
  ; my - the divident (which determines the sign of the result)
  ; divisor - the divisor, must be an Integer
  %: λ( divisor )
    asm
      mov ecx, divisor.type  ; Load type hash of first argument into ECX
      cmp ecx, #Integer      ; test that divisor is an Integer
      jne Integer_u25_incorrect_type
      cdq                    ; sign extend EAX into EDX:EAX
      idiv divisor.payload
      mov eax, edx           ; remainder in edx, we want to return it in eax
      mov edx, &Integer      ; dispatch function
      mov ecx, #Integer      ; Integer type hash
      add esp, 12
      pop ebp
      ret                    ; and return
      Integer_u25_incorrect_type:
      ; Do something?

  ; Greater than. Returns a boolean object
  >: λ( term )
    asm
      mov ecx, term.type     ; Load type has of the first argument into ecx
      cmp ecx, #Integer      ; Test that the term is an Integer
      jne Integer_u3e_incorrect_type
      cmp eax, term.payload  ; Test the two number
      jg Integer_u3e_true
      mov eax, 0             ; False boolean value
      mov edx, &Boolean      ; Boolean object dispatch function
      mov ecx, #Boolean      ; Boolean object type hash
      add esp, 12
      pop ebp
      ret                    ; and return
      Integer_u3e_true:
      mov eax, 1
      mov edx, &Boolean      ; Boolean object dispatch function
      mov ecx, #Boolean      ; Boolean object type hash
      add esp, 12
      pop ebp
      ret                    ; and return
      Integer_u3e_incorrect_type:

  ; Less than. Returns a boolean object
  <: λ( term )
    asm
      mov ecx, term.type     ; Load type has of the first argument into ecx
      cmp ecx, #Integer      ; Test that the term is an Integer
      jne Integer_u3c_incorrect_type
      cmp eax, term.payload  ; Test the two number
      jl Integer_u3c_true                ; Jump if less than
      mov eax, 0             ; False boolean value
      mov edx, &Boolean      ; Boolean object dispatch function
      mov ecx, #Boolean      ; Boolean object type hash
      add esp, 12
      pop ebp
      ret                    ; and return
      Integer_u3c_true:
      mov eax, 1
      mov edx, &Boolean      ; Boolean object dispatch function
      mov ecx, #Boolean      ; Boolean object type hash
      add esp, 12
      pop ebp
      ret                    ; and return
      Integer_u3c_incorrect_type:

  ; Greater than or Equal to. Returns a boolean object
  ≥: λ( term )
    asm
      mov ecx, term.type     ; Load type has of the first argument into ecx
      cmp ecx, #Integer      ; Test that the term is an Integer
      jne Integer_u2265_incorrect_type
      cmp eax, term.payload  ; Test the two numbers
      jge Integer_u2265_true
      mov eax, 0             ; False boolean value
      mov edx, &Boolean      ; Boolean object dispatch function
      mov ecx, #Boolean      ; Boolean object type hash
      add esp, 12
      pop ebp
      ret                    ; and return
      Integer_u2265_true:
      mov eax, 1
      mov edx, &Boolean      ; Boolean object dispatch function
      mov ecx, #Boolean      ; Boolean object type hash
      add esp, 12
      pop ebp
      ret                    ; and return
      Integer_u2265_incorrect_type:

  ; Less than or equal to. Returns a boolean object
  ≤: λ( term )
    asm
      mov ecx, term.type     ; Load type has of the first argument into ecx
      cmp ecx, #Integer      ; Test that the term is an Integer
      jne Integer_u2264_incorrect_type
      cmp eax, term.payload  ; Test the two number
      jle Integer_u2265_true
      mov eax, 0             ; False boolean value
      mov edx, &Boolean      ; Boolean object dispatch function
      mov ecx, #Boolean      ; Boolean object type hash
      add esp, 12
      pop ebp
      ret                    ; and return
      Integer_u2264_true:
      mov eax, 1
      mov edx, &Boolean      ; Boolean object dispatch function
      mov ecx, #Boolean      ; Boolean object type hash
      add esp, 12
      pop ebp
      ret                    ; and return
      Integer_u2264_incorrect_type:

  ≡: λ( term )
    asm
      mov ecx, term.type     ; Load type hash of the first argumment into ecx
      cmp ecx, #Integer
      jne Integer_u2261_not_equal ; If it's not an Integer, then it cannot be equal
      cmp eax, term.payload  ; Do the comparison
      jne Integer_u2261_not_equal
      mov eax, 1             ; return Boolean(true)
      mov edx, &Boolean
      mov ecx, #Boolean
      add esp, 12
      pop ebp
      ret
      Integer_u2261_not_equal:
      mov eax, 0             ; return Boolean(false)
      mov edx, &Boolean
      mov ecx, #Boolean
      pop ebp
      ret

  ≢: λ( term )
    asm
      mov ecx, term.type     ; Load type hash of the first argumment into ecx
      cmp ecx, #Integer
      jne Integer_u2262_not_equal          ; If it's not an Integer, then it cannot be equal
      cmp eax, term.payload  ; Do the comparison
      jne Integer_u2262_not_equal
      mov eax, 0             ; return Boolean(true)
      mov edx, &Boolean
      mov ecx, #Boolean
      add esp, 12
      pop ebp
      ret
      Integer_u2262_not_equal:
      mov eax, 1             ; return Boolean(false)
      mov edx, &Boolean
      mov ecx, #Boolean
      pop ebp
      ret

